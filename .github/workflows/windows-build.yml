name: Windows EXE (PyInstaller)

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-win:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller pyinstaller-hooks-contrib

      - name: Compute version
        shell: pwsh
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/")) { $ver = "${{ github.ref_name }}" }
          else { $ver = "dev-${{ github.run_number }}" }
          "APP_VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "APP_VER=$ver"

      - name: Locate entry point
        shell: pwsh
        run: |
          if (Test-Path "main.py") { $entry="main.py" }
          else { throw "main.py não encontrado na raiz. Ajuste este passo." }
          "ENTRY=$entry" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "ENTRY=$entry"

      - name: Build EXE (PyInstaller API)
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path dist)  { Remove-Item dist  -Recurse -Force }
          New-Item -ItemType Directory -Force -Path build | Out-Null

          @"
import os
import PyInstaller.__main__ as P

ver   = os.environ.get("APP_VER", "dev")
name  = f"UFU-PreencheDiario-{ver}"
entry = os.environ.get("ENTRY", "main.py")

# se existir .spec na raiz, usamos ele; caso contrário, build do script
specs = [f for f in os.listdir(".") if f.lower().endswith(".spec")]
if specs:
    print(">> Building from SPEC:", specs[0])
    P.run([specs[0]])
else:
    print(">> Building from script:", entry)
    opts = ["--noconfirm","--clean","--onefile","--windowed","-n", name]
    ico = os.path.join("assets","app.ico")
    if os.path.exists(ico):
        opts += ["-i", ico]
    opts += [entry]
    print("PyInstaller opts:", opts)
    P.run(opts)
"@ | Set-Content -Path build/run_pyi.py -Encoding UTF8

          python build/run_pyi.py

          Write-Host "Dist contents:"
          Get-ChildItem dist -Recurse | Format-Table -AutoSize

      - name: Upload artifact (.exe)
        uses: actions/upload-artifact@v4
        with:
          name: UFU-PreencheDiario-${{ env.APP_VER }}-win
          path: dist/*.exe
          if-no-files-found: error

      - name: Publish GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.exe
          generate_release_notes: true
